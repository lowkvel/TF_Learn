from __future__ import absolute_import, division, print_function

# IMPORT tf, keras, np
import tensorflow as tf
from tensorflow import keras
import numpy as np

# IMPORT the data set: IMDB
imdb = keras.datasets.imdb
(train_data, train_labels), (test_data, test_labels) = imdb.load_data(num_words=10000)
# num_words=10000: keeps the top 10k most frequently occurring words in the training data, rare words are discarded

# explore the data
print("Training entries: {}, labels: {}".format(len(train_data), len(train_labels)))  # each label is either 0:- or 1:+
print(train_data[0])  # each train data is a series of index of specific word in dictionary 
len(train_data[0]), len(train_data[1])  # length of reviews of data may be different, need to solve this after

# explore the data: convert the indices in data back to words
word_index = imdb.get_word_index()  # get the dictionary mapping words to an integer index
word_index = {k:(v+3) for k,v in word_index.items()}  # The first indices are reserved
word_index["<PAD>"] = 0
word_index["<START>"] = 1
word_index["<UNK>"] = 2  # unknown
word_index["<UNUSED>"] = 3
reverse_word_index = dict([(value, key) for (key, value) in word_index.items()])
def decode_review(text):
    return ' '.join([reverse_word_index.get(i, '?') for i in text])
decode_review(train_data[0])

# BACKGROUND KNOWLEDGE OF PREPARING TEXT DATA
# The reviews — the arrays of integers — must be converted to tensors before fed into the neural network. 
# This conversion can be done a couple of ways:
# 1st:  Convert the arrays into vectors of 0s and 1s indicating word occurrence, similar to a one-hot encoding. 
#       For example, the sequence [3, 5] would become a 10,000-dimensional vector that is all zeros except for indices 3 and 5, which are ones. 
#       Then, make this the first layer in our network — a Dense layer — that can handle floating point vector data. 
#       This approach is memory intensive, though, requiring a num_words * num_reviews size matrix.
# 2nd:  Alternatively, we can pad the arrays so they all have the same length. 
#       Then create an integer tensor of shape max_length * num_reviews. 
#       We can use an embedding layer capable of handling this shape as the first layer in our network.
# BACKGROUND KNOWLEDGE OF PREPARING TEXT DATA

# PREPARE the data using the 2nd approach shown above
train_data = keras.preprocessing.sequence.pad_sequences(train_data,
                                                        value=word_index["<PAD>"],
                                                        padding='post',
                                                        maxlen=256)
test_data = keras.preprocessing.sequence.pad_sequences(test_data,
                                                       value=word_index["<PAD>"],
                                                       padding='post',
                                                       maxlen=256)
len(train_data[0]), len(train_data[1])  # [256, 256]
print(train_data[0])                    # all indexed as 0s after the last word until max length is filled 

# BACKGROUND KNOWLEDGE OF BUILDING NEURAL NETWORK
# The neural network is created by stacking layers — this requires two main architectural decisions:
#   How many layers to use in the model?
#   How many hidden units to use for each layer?
#   More layers/units, more space to learn, more complex patterns, 
#     but also more computational intensive and possible overfitting.
# BACKGROUND KNOWLEDGE OF BUILDING NEURAL NETWORK

# BUILD the model
vocab_size = 10000  # input shape is the vocabulary count used for the movie reviews (10,000 words)
model = keras.Sequential()
model.add(keras.layers.Embedding(vocab_size, 16))
model.add(keras.layers.GlobalAveragePooling1D())
model.add(keras.layers.Dense(16, activation=tf.nn.relu))
model.add(keras.layers.Dense(1, activation=tf.nn.sigmoid))
model.summary()
# The 4 layers are stacked sequentially to build the classifier:
# 1st:  The first layer is an Embedding layer. 
#       This layer takes the integer-encoded vocabulary and looks up the embedding vector for each word-index. 
#       These vectors are learned as the model trains. 
#       The vectors add a dimension to the output array. 
#       The resulting dimensions are: (batch, sequence, embedding).
# 2nd:  Next, a GlobalAveragePooling1D layer returns a fixed-length output vector for each example by averaging over the sequence dimension. 
#       This allows the model to handle input of variable length, in the simplest way possible.
# 3rd:  This fixed-length output vector is piped through a fully-connected (Dense) layer with 16 hidden units.
# 4th:  The last layer is densely connected with a single output node. 
#       Using the sigmoid activation function, this value is a float between 0 and 1, representing a probability, or confidence level.

model.compile(optimizer='adam',
              loss='binary_crossentropy',
              metrics=['acc'])
# loss function:  binary_crossentropy:  better for dealing with probabilities
#                                       it measures the "distance" between probability distributions

# VALIDATION SET creation within the training set , not using testing set
x_val = train_data[:10000]
partial_x_train = train_data[10000:]
y_val = train_labels[:10000]
partial_y_train = train_labels[10000:]
# develop and tune model using only the training data, then use the test data just once to evaluate our accuracy

# TRAIN the model
history = model.fit(partial_x_train,
                    partial_y_train,
                    epochs=40,
                    batch_size=512,
                    validation_data=(x_val, y_val),
                    verbose=1)

# EVALUATE the model using test set
results = model.evaluate(test_data, test_labels)
print(results)

# visualization: visualize the acc and loss over time (epochs)
import matplotlib.pyplot as plt
acc = history_dict['acc']
val_acc = history_dict['val_acc']
loss = history_dict['loss']
val_loss = history_dict['val_loss']
epochs = range(1, len(acc) + 1)

# visualization: for loss
plt.plot(epochs, loss, 'bo', label='Training loss')       # "bo" is for "blue dot"
plt.plot(epochs, val_loss, 'b', label='Validation loss')  # b is for "solid blue line"
plt.title('Training and validation loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()
plt.show()

# visualization: for acc
plt.clf()   # clear figure
plt.plot(epochs, acc, 'bo', label='Training acc')
plt.plot(epochs, val_acc, 'b', label='Validation acc')
plt.title('Training and validation accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()
plt.show()

#@title MIT License
#
# Copyright (c) 2017 François Chollet
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
