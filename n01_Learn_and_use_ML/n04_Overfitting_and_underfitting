from __future__ import absolute_import, division, print_function

# IMPORT tf, keras, np, plt
import tensorflow as tf
from tensorflow import keras
import numpy as np
import matplotlib.pyplot as plt

# IMPORT and encode dataset to ilstrate overfit using multi-hot-encoding, 1st approach in n02_Text_classification
NUM_WORDS = 10000
(train_data, train_labels), (test_data, test_labels) = keras.datasets.imdb.load_data(num_words=NUM_WORDS)
def multi_hot_sequences(sequences, dimension):
    results = np.zeros((len(sequences), dimension)) # create an all-zero matrix of shape (len(sequences), dimension)
    for i, word_indices in enumerate(sequences):
        results[i, word_indices] = 1.0  # set specific indices of results[i] to 1s
    return results
train_data = multi_hot_sequences(train_data, dimension=NUM_WORDS)
test_data = multi_hot_sequences(test_data, dimension=NUM_WORDS)
# The word indices are sorted by frequency, so it is expected that there are more 1-values near index zero
# plt.plot(train_data[0])

# DEMONSTRATE OVERFITTING
# 
# The simplest way to prevent overfitting is to reduce the size of the model, 
# i.e. the number of learnable parameters in the model (which is determined by the number of layers and the number of units per layer). 
# In deep learning, the number of learnable parameters in a model is often referred to as the model's "capacity". 
# Intuitively, a model with more parameters will have more "memorization capacity" 
# and therefore will be able to easily learn a perfect dictionary-like mapping between training samples and their targets, 
# a mapping without any generalization power, but this would be useless when making predictions on previously unseen data.
# 
# Always keep this in mind: deep learning models tend to be good at fitting to the training data, 
# but the real challenge is generalization, not fitting.
# 
# On the other hand, if the network has limited memorization resources, 
# it will not be able to learn the mapping as easily. 
# To minimize its loss, it will have to learn compressed representations that have more predictive power. 
# At the same time, if you make your model too small, it will have difficulty fitting to the training data. 
# There is a balance between "too much capacity" and "not enough capacity".
# 
# Unfortunately, there is no magical formula to determine the right size or architecture of your model 
# (in terms of the number of layers, or the right size for each layer). 
# You will have to experiment using a series of different architectures.
# To find an appropriate model size, it's best to start with relatively few layers and parameters, 
# then begin increasing the size of the layers or adding new layers until you see diminishing returns on the validation loss.
# 
# DEMONSTRATE OVERFITTING

# BASELINE model
baseline_model = keras.Sequential([
    # `input_shape` is only required here so that `.summary` works. 
    keras.layers.Dense(16, activation=tf.nn.relu, input_shape=(NUM_WORDS,)),
    keras.layers.Dense(16, activation=tf.nn.relu),
    keras.layers.Dense(1, activation=tf.nn.sigmoid)
])
baseline_model.compile(optimizer='adam',
                       loss='binary_crossentropy',
                       metrics=['accuracy', 'binary_crossentropy'])
# baseline_model.summary()
baseline_history = baseline_model.fit(train_data,
                                      train_labels,
                                      epochs=20,
                                      batch_size=512,
                                      validation_data=(test_data, test_labels),
                                      verbose=2)

# SMALLER model
smaller_model = keras.Sequential([
    keras.layers.Dense(4, activation=tf.nn.relu, input_shape=(NUM_WORDS,)),
    keras.layers.Dense(4, activation=tf.nn.relu),
    keras.layers.Dense(1, activation=tf.nn.sigmoid)
])
smaller_model.compile(optimizer='adam',
                loss='binary_crossentropy',
                metrics=['accuracy', 'binary_crossentropy'])
# smaller_model.summary()
smaller_history = smaller_model.fit(train_data,
                                    train_labels,
                                    epochs=20,
                                    batch_size=512,
                                    validation_data=(test_data, test_labels),
                                    verbose=2)

# BIGGER model
bigger_model = keras.models.Sequential([
    keras.layers.Dense(512, activation=tf.nn.relu, input_shape=(NUM_WORDS,)),
    keras.layers.Dense(512, activation=tf.nn.relu),
    keras.layers.Dense(1, activation=tf.nn.sigmoid)
])
bigger_model.compile(optimizer='adam',
                     loss='binary_crossentropy',
                     metrics=['accuracy','binary_crossentropy'])
# bigger_model.summary()
bigger_history = bigger_model.fit(train_data, train_labels,
                                  epochs=20,
                                  batch_size=512,
                                  validation_data=(test_data, test_labels),
                                  verbose=2)

# plot the training and validation loss
def plot_history(histories, key='binary_crossentropy'):
  plt.figure(figsize=(16,10))
  for name, history in histories:
    val = plt.plot(history.epoch, history.history['val_'+key], '--', label=name.title()+' Val')
    plt.plot(history.epoch, history.history[key], color=val[0].get_color(), label=name.title()+' Train')
    # The solid lines show the training loss, and the dashed lines show the validation loss
  plt.xlabel('Epochs')
  plt.ylabel(key.replace('_',' ').title())
  plt.legend()
  plt.xlim([0,max(history.epoch)])
plot_history([('baseline', baseline_history),
              ('smaller', smaller_history),
              ('bigger', bigger_history)])
# Results:
# The more capacity the network has (the bigger the model is), 
# the quicker it will be able to model the training data (resulting in a low training loss), 
# but the more susceptible it is to overfitting (resulting in a large difference between the training and validation loss).

# STRAGIES - Add weight regularization
# 
# A common way to mitigate overfitting is to put constraints on the complexity of a network 
#   by forcing its weights only to take small values, which makes the distribution of weight values more "regular". 
# This is called "weight regularization", 
#   and it is done by adding to the loss function of the network a cost associated with having large weights. 
# 
# L1 regularization, where the cost added is proportional to the 'absolute value' of the weights coefficients 
#   (i.e. to what is called the "L1 norm" of the weights).
# L2 regularization, where the cost added is proportional to the 'square of the value' of the weights coefficients 
#   (i.e. to what is called the squared "L2 norm" of the weights). 

l2_model = keras.models.Sequential([
    # the added part: 'kernel_regularizer=keras.regularizers.l2(0.001)'
    # l2(0.001) means that every coefficient in the weight matrix of the layer will 
    #   add 0.001 * weight_coefficient_value^2 to the total loss of the network
    keras.layers.Dense(16, kernel_regularizer=keras.regularizers.l2(0.001), activation=tf.nn.relu, input_shape=(NUM_WORDS,)),
    keras.layers.Dense(16, kernel_regularizer=keras.regularizers.l2(0.001), activation=tf.nn.relu),
    keras.layers.Dense(1, activation=tf.nn.sigmoid)
])
l2_model.compile(optimizer='adam',
                 loss='binary_crossentropy',
                 metrics=['accuracy', 'binary_crossentropy'])
l2_model_history = l2_model.fit(train_data, train_labels,
                                epochs=20,
                                batch_size=512,
                                validation_data=(test_data, test_labels),
                                verbose=2)
plot_history([('baseline', baseline_history),
              ('l2', l2_model_history)])

# STRAGIES - Add dropout 
# 
# Dropout, applied to a layer, consists of 
#   randomly "dropping out" (i.e. set to zero) a number of output features of the layer during training. 
# Let's say a given layer would normally have returned a vector 
#   e.g. [0.2, 0.5, 1.3, 0.8, 1.1] for a given input sample during training; 
# after applying dropout, this vector will have a few zero entries distributed at random, 
#   e.g. [0.0, 0.5, 1.3, 0.0, 1.1]. 
# The "dropout rate" is the fraction of the features that are being zeroed-out; 
#   it is usually set between 0.2 and 0.5. 
# At test time, no units are dropped out.

dpt_model = keras.models.Sequential([
    # In tf.keras you can introduce dropout in a network via the Dropout 'layer', 
    #   which gets applied to the output of layer right BEFORE.
    # So no additional layer is added. 
    keras.layers.Dense(16, activation=tf.nn.relu, input_shape=(NUM_WORDS,)),
    keras.layers.Dropout(0.5),
    keras.layers.Dense(16, activation=tf.nn.relu),
    keras.layers.Dropout(0.5),
    keras.layers.Dense(1, activation=tf.nn.sigmoid)
])
dpt_model.compile(optimizer='adam',
                  loss='binary_crossentropy',
                  metrics=['accuracy','binary_crossentropy'])
dpt_model_history = dpt_model.fit(train_data, train_labels,
                                  epochs=20,
                                  batch_size=512,
                                  validation_data=(test_data, test_labels),
                                  verbose=2)
plot_history([('baseline', baseline_history),
              ('dropout', dpt_model_history)])

# notes
# the most common ways to prevent overfitting in neural networks:
# 1st:  Get more training data.
# 2nd:  Reduce the capacity of the network.
# 3rd:  Add weight regularization.
# 4th:  Add dropout.
# 5th:  Data-augmentation (not covered here).
# 6th:  Batch normalization (not covered here).

#@title MIT License
#
# Copyright (c) 2017 Fran√ßois Chollet
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
